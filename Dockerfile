# Stage 1: Dependency installation
# Use a Node.js LTS image for consistency and stability.
FROM node:20-alpine AS base

# Set the working directory inside the container
WORKDIR /app

# Copy the package.json and yarn.lock files to install dependencies
COPY package.json yarn.lock ./

# Install dependencies. Using --frozen-lockfile ensures the build is repeatable.
RUN yarn install --frozen-lockfile

# Stage 2: Next.js application build
# Start from the base stage to reuse the installed dependencies
FROM base AS builder

# Copy the rest of the application files from your local directory
COPY . .

# Run the Next.js build command
# The Next.js framework handles the server creation and bundling
RUN yarn build

# Stage 3: Final production image
# Use a clean, minimal image for the production server
FROM node:20-alpine AS runner

# Set the environment to production
ENV NODE_ENV=production

# Set the working directory
WORKDIR /app

# Copy only the essential files for the production server from the builder stage.
# This is the key optimization for a small final image.
# We copy the 'standalone' output, which includes all necessary files and a server.js file.
COPY --from=builder /app/.next/standalone ./
# Copy the public assets (images, fonts, etc.)
COPY --from=builder /app/public ./public
# Copy the static assets generated by the build
COPY --from=builder /app/.next/static ./.next/static

# Expose the port that the Next.js server will run on
EXPOSE 3000

# Start the production server using the 'server.js' file created by the standalone build
CMD ["node", "server.js"]